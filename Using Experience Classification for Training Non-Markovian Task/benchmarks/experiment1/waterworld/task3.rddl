domain waterworld {
	requirements = {
    	concurrent,           // this domain permits multiple non-default actions
        continuous,           // this domain uses real-valued parameterized variables
        cpf-deterministic,    // this domain uses deterministic conditional functions for transitions
        intermediate-nodes,   // this domain uses intermediate pvariable nodes
        reward-deterministic  // this domain does not use a stochastic reward
    };
    types {
    ball: object; //b1, b2, b3...
    dim : object; //x, y
    state: {@q1, @q2, @q3, @q4, @q5, @q6, @q7, @q8, @q9, @q10, @q11, @q12, @q13, @q14, @q15, @q16,
     @q17, @q18};
     state1: {@1, @2, @3, @4, @5, @6, @7, @8, @9};
    };
    pvariables {
    	//field setting
    	MIN-ACTION-BOUND: { non-fluent, real, default = -3.5 };
        MAX-ACTION-BOUND: { non-fluent, real, default =  3.5 };
        MIN-VELO-BOUND: { non-fluent, real, default = -3.5 };
        MAX-VELO-BOUND: {non-fluent, real, default = 3.5};
        MAX-FIELD-WIDTH: {non-fluent, real, default = 25};
       //ball setting
        BALL-RADIUS: {non-fluent, real, default= 0.5};
        RED(ball) : { non-fluent, bool, default = false };
        GREEN(ball) : { non-fluent, bool, default = false };
        BLUE(ball) : { non-fluent, bool, default = false };
        BLACK(ball) : { non-fluent, bool, default = false };
        WHITE(ball) : { non-fluent, bool, default = false };
        GREY(ball) : { non-fluent, bool, default = false };
        ba-velo(ball, dim): {state-fluent, real, default = 0.0};
        ba-loc(ball, dim): {state-fluent, real, default = 0.0};
        if-crash(ball, dim): { interm-fluent, real};
        ba-ag-crash(ball): { interm-fluent, bool};

       //agent setting
        ag-loc(dim): { state-fluent, real, default = 0.0 };
        ag-velo(dim): { state-fluent, real, default = 0.0 };
        ag-move(dim): { action-fluent, real, default = 0.0 };
        if-ag-crash(dim): { interm-fluent, real, level = 1};
        //automata states
    	p1:  { interm-fluent, bool };
        p2:  { interm-fluent, bool };
        p3:  { interm-fluent, bool };
        p4:  { interm-fluent, bool };
        p5:  { interm-fluent, bool };
        p6:  { interm-fluent, bool };
    	as : {state-fluent, state1, default = @1};
    	ds : {interm-fluent, state};
    	pds : {state-fluent, state, default = @q1};


    };
    cpfs{
    	//ball-move

    	if-crash(?b, ?d) = if(ba-loc(?b, ?d) + ba-velo(?b, ?d) >= MAX-FIELD-WIDTH)
    						then 1
    						else [
    							if(ba-loc(?b, ?d) + ba-velo(?b, ?d) <= 0)
    							then 2
    							else 0
    						];

    	ba-loc'(?b, ?d) = if(if-crash(?b, ?d)==0)
    						then ba-loc(?b, ?d) + ba-velo(?b, ?d)
    						else[
    							if(if-crash(?b, ?d)==1)
    							then MAX-FIELD-WIDTH
    							else 0
    						];

    	ba-velo'(?b, ?d) = if(if-crash(?b, ?d)~=0)
    						then -ba-velo(?b, ?d)
    						else ba-velo(?b, ?d);

    	ba-ag-crash(?b) = if(forall_{?d:dim}((ba-loc(?b, ?d) - ag-loc(?d) <= BALL-RADIUS * 2) ^ (ba-loc(?b, ?d) - ag-loc(?d) >= -BALL-RADIUS*2) ))
    				then true
    				else false;


    	//agent move
    	if-ag-crash(?d) = if(ag-loc(?d) + ag-velo(?d) >= MAX-FIELD-WIDTH)
    						then 1
    						else [
    							if(ag-loc(?d) + ag-velo(?d) <= 0)
    							then 2
    							else 0
    						];

    	ag-loc'(?d) = if(if-ag-crash(?d)==0)
    						then ag-loc(?d) + ag-velo(?d)
    						else[
    							if(if-ag-crash(?d)==1)
    							then MAX-FIELD-WIDTH
    							else 0
    						];

    	ag-velo'(?d) = if(if-ag-crash(?d)~=0)
    						then -ag-velo(?d)
    						else ag-move(?d);

    //event setting
	p1 =
		if(exists_{?b:ball}(RED(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p2 =
	    if(exists_{?b:ball}(GREEN(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p3 = if(exists_{?b:ball}(BLUE(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

    p4 =
		if(exists_{?b:ball}(BLACK(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p5 =
	    if(exists_{?b:ball}(WHITE(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

	p6 = if(exists_{?b:ball}(GREY(?b) ^ ba-ag-crash(?b)))
		then true
		else false;

    // DFA translation
    ds =
    if(pds == @q1 ^(~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6)) then @q1
    else if(pds == @q1 ^((p2 & ~p1) | (p3 & ~p1) | (p5 & ~p4) | (p6 & ~p4))) then @q2
    else if(pds == @q1 ^(p4 & ~p1 & ~p2 & ~p3)) then @q3
    else if(pds == @q1 ^(p1 & ~p4 & ~p5 & ~p6)) then @q4
    else if(pds == @q1 ^(p1 & p4)) then @q5
    else if(pds == @q2 ^(true)) then @q2
    else if(pds == @q3 ^(~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6)) then @q3
    else if(pds == @q3 ^((p2 & ~p1) | (p3 & ~p1) | (p4 & ~p5) | (p6 & ~p5))) then @q2
    else if(pds == @q3 ^(p5 & ~p1 & ~p2 & ~p3)) then @q6
    else if(pds == @q3 ^(p1 & ~p4 & ~p5 & ~p6)) then @q5
    else if(pds == @q3 ^(p1 & p5)) then @q7
    else if(pds == @q4 ^(~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6)) then @q4
    else if(pds == @q4 ^((p1 & ~p2) | (p3 & ~p2) | (p5 & ~p4) | (p6 & ~p4))) then @q2
    else if(pds == @q4 ^(p4 & ~p1 & ~p2 & ~p3)) then @q5
    else if(pds == @q4 ^(p2 & ~p4 & ~p5 & ~p6)) then @q8
    else if(pds == @q4 ^(p2 & p4)) then @q9
    else if(pds == @q5 ^(~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6)) then @q5
    else if(pds == @q5 ^((p1 & ~p2) | (p3 & ~p2) | (p4 & ~p5) | (p6 & ~p5))) then @q2
    else if(pds == @q5 ^(p5 & ~p1 & ~p2 & ~p3)) then @q7
    else if(pds == @q5 ^(p2 & ~p4 & ~p5 & ~p6)) then @q9
    else if(pds == @q5 ^ (p2 & p5)) then @q10
    else if(pds == @q6 ^(~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6)) then @q6
    else if(pds == @q6 ^ (p6 & ~p1 & ~p2 & ~p3)) then @q11
    else if(pds == @q6 ^((p2 & ~p1) | (p3 & ~p1) | (p4 & ~p6) | (p5 & ~p6))) then @q2
    else if(pds == @q6 ^(p1 & ~p4 & ~p5 & ~p6)) then @q7
    else if(pds == @q6 ^ (p1 & p6)) then @q12
    else if(pds == @q7 ^(~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6)) then @q7
    else if(pds == @q7 ^ (p6 & ~p1 & ~p2 & ~p3)) then @q12
    else if(pds == @q7 ^((p1 & ~p2) | (p3 & ~p2) | (p4 & ~p6) | (p5 & ~p6))) then @q2
    else if(pds == @q7 ^ (p2 & ~p4 & ~p5 & ~p6)) then @q10
    else if(pds == @q7 ^ (p2 & p6)) then @q13
    else if(pds == @q8 ^(~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6)) then @q8
    else if(pds == @q8 ^((p1 & ~p3) | (p2 & ~p3) | (p5 & ~p4) | (p6 & ~p4))) then @q2
    else if(pds == @q8 ^(p4 & ~p1 & ~p2 & ~p3)) then @q9
    else if(pds == @q8 ^ (p3 & ~p4 & ~p5 & ~p6)) then @q14
    else if(pds == @q8 ^ (p3 & p4)) then @q15
    else if(pds == @q9 ^(~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6)) then @q9
    else if(pds == @q9 ^((p1 & ~p3) | (p2 & ~p3) | (p4 & ~p5) | (p6 & ~p5))) then @q2
    else if(pds == @q9 ^ (p5 & ~p1 & ~p2 & ~p3)) then @q10
    else if(pds == @q9 ^ (p3 & ~p4 & ~p5 & ~p6)) then @q15
    else if(pds == @q9 ^ (p3 & p5)) then @q16
    else if(pds == @q10 ^ (~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6)) then @q10
    else if(pds == @q10 ^ (p6 & ~p1 & ~p2 & ~p3)) then @q13
    else if(pds == @q10 ^((p1 & ~p3) | (p2 & ~p3) | (p4 & ~p6) | (p5 & ~p6))) then @q2
    else if(pds == @q10 ^ (p3 & ~p4 & ~p5 & ~p6)) then @q16
    else if(pds == @q10 ^ (p3 & p6)) then @q17
    else if(pds == @q11 ^ (~p1 & ~p2 & ~p3)) then @q11
    else if(pds == @q11 ^(~p1 & (p2 | p3))) then @q2
    else if(pds == @q11 ^ (p1)) then @q12
    else if(pds == @q12 ^ (~p1 & ~p2 & ~p3)) then @q12
    else if(pds == @q12 ^(~p2 & (p1 | p3))) then @q2
    else if(pds == @q12 ^ (p2)) then @q13
    else if(pds == @q13 ^ (~p1 & ~p2 & ~p3)) then @q13
    else if(pds == @q13 ^ (p3)) then @q17
    else if(pds == @q13 ^(~p3 & (p1 | p2))) then @q2
    else if(pds == @q14 ^ (~p4 & ~p5 & ~p6)) then @q14
    else if(pds == @q14 ^(~p4 & (p5 | p6))) then @q2
    else if(pds == @q14 ^ (p4)) then @q15
    else if(pds == @q15 ^ (~p4 & ~p5 & ~p6)) then @q15
    else if(pds == @q15 ^(~p5 & (p4 | p6))) then @q2
    else if(pds == @q15 ^ (p5)) then @q16
    else if(pds == @q16 ^ (~p4 & ~p5 & ~p6)) then @q16
    else if(pds == @q16 ^ (p6)) then @q17
    else if(pds == @q16 ^(~p6 & (p4 | p5))) then @q2
    else if(pds == @q17 ^ (true)) then @q17
    else @q18;

    pds' = ds;

    as' =
    if(ds == @q1) then @1
    else if(ds == @q2) then @8
    else if(ds == @q3 | ds == @q4) then @2
    else if(ds == @q5 | ds == @q6 | ds == @q8) then @3
    else if(ds == @q7 | ds == @q9 | ds == @q11 | ds == @q14) then @4
    else if(ds == @q10 | ds == @q12 | ds == @q15) then @5
    else if(ds == @q13 | ds == @q16) then @6
    else if(ds == @q17) then @7
    else @9;

    };

    reward =  100*[as == @7];

    action-preconditions {
    	forall_{?d:dim} [ag-move(?d) >= MIN-ACTION-BOUND];
        forall_{?d:dim} [ag-move(?d) <= MAX-ACTION-BOUND];

    };

    termination{
    as == @7;
    as == @8;
    };

}




