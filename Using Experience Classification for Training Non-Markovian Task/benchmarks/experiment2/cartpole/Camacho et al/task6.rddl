////////////////////////////////////////////////////////////////////
// A simple continuous state MDP for the classical cart-pole system
// by Rich Sutton as implemented in http://incompleteideas.net/sutton/book/code/pole.c.
//
// The goal here is to push a cart on a flat and frictionless surface
// left or right by applying a constant force, in order to balance a
// pole balanced vertically in the center of the cart.
//
////////////////////////////////////////////////////////////////////
domain cart_pole_discrete {

    requirements = {
        reward-deterministic
    };


    pvariables {

    	// forces
		GRAVITY   : { non-fluent, real, default = 9.8 };        // force of gravity acting down
		FORCE-MAX : { non-fluent, real, default = 10.0 };		// force applied to the side of the cart
		G1: { non-fluent, real, default = 1.0 };
	    G2: { non-fluent, real, default = 3.0 };
	    G3: { non-fluent, real, default = 5.0 };
	    G4: { non-fluent, real, default = 7.0 };
	    G5: { non-fluent, real, default = 9.0 };
	    G6: { non-fluent, real, default = 11.0 };
	    G7: { non-fluent, real, default = 13.0 };

		// cart and pole properties
		CART-MASS : { non-fluent, real, default = 1.0 };        // mass of the cart
		POLE-MASS : { non-fluent, real, default = 0.1 };		// mass of the pole
		POLE-LEN  : { non-fluent, real, default = 0.5 }; 		// half of the pole length

		// other constants
		TIME-STEP : { non-fluent, real, default = 0.02 }; 		// seconds between state updates
		POS-LIMIT : { non-fluent, real, default = 15};		// limit of cart position
		ANG-LIMIT : { non-fluent, real, default = 0.2094395 };	// limit of pole angle

		// interm & derived fluents
		temp : { interm-fluent, real };						// temporary variable
		acc : { interm-fluent, real };							// position acceleration
		ang-acc : { interm-fluent, real };						// angular acceleration

		// states
       	pos    	: { state-fluent, real, default = 0 };          // cart position
       	ang-pos	: { state-fluent, real, default = 0 };          // pole angle
       	vel   	: { state-fluent, real, default = 0 };          // cart velocity
       	ang-vel : { state-fluent, real, default = 0 };          // pole angular velocity
        r : { state-fluent, bool, default = false};
        g1 : { state-fluent, bool, default = false};
        g2 : { state-fluent, bool, default = false};
        g3 : { state-fluent, bool, default = false};
        g4 : { state-fluent, bool, default = false};
        g5 : { state-fluent, bool, default = false};
        g6 : { state-fluent, bool, default = false};
        g7: { state-fluent, bool, default = false};
        t: { state-fluent, bool, default = false};
       	// actions
        force: { action-fluent, real, default = 0.0 };
       	//automata
       	q1: { state-fluent, bool, default = true};
       	q2: { state-fluent, bool, default = false};
       	q3: { state-fluent, bool, default = false};
       	q4: { state-fluent, bool, default = false};
       	q5: { state-fluent, bool, default = false};
       	q6: { state-fluent, bool, default = false};
       	q7: { state-fluent, bool, default = false};
       	q8: { state-fluent, bool, default = false};
    };

    cpfs {

		// compute the pole angular acceleration
		temp = (force + POLE-LEN * POLE-MASS * pow[ang-vel, 2] * sin[ang-pos]) / (CART-MASS + POLE-MASS);
		ang-acc = (GRAVITY * sin[ang-pos] - cos[ang-pos] * temp) / (
            POLE-LEN * ((4.0 / 3.0) - (POLE-MASS * pow[cos[ang-pos], 2] / (CART-MASS + POLE-MASS))));

		// compute the cart acceleration
		acc = temp - (POLE-LEN * POLE-MASS * ang-acc * cos[ang-pos] / (CART-MASS + POLE-MASS));

		// Euler integration formula
		pos' = pos + TIME-STEP * vel;
		ang-pos' = ang-pos + TIME-STEP * ang-vel;
		vel' = vel + TIME-STEP * acc;
		ang-vel' = ang-vel + TIME-STEP * ang-acc;

		r' = (pos >= -2) ^ (pos <= -1);
		g1' = pos > G1 ^ pos < G1 + 1;
		g2' = pos > G2 ^ pos < G2 + 1;
		g3' = pos > G3 ^ pos < G3 + 1;
		g4' = pos > G4 ^ pos < G4 + 1;
		g5' = pos > G5 ^ pos < G5 + 1;
		g6' = pos > G6 ^ pos < G6 + 1;
		g7' = pos > G7 ^ pos < G7 + 1;
		t' = pos < -1 | pos > POS-LIMIT | ang-pos < -ANG-LIMIT | ang-pos > ANG-LIMIT;

        q1' = (q1 ^ ~g1);
        q2' = (q1 ^ g1) | (q2 ^ ~g2);
        q3' = (q2 ^ g2) | (q3 ^ ~g3);
        q4' = (q3 ^ g3) | (q4 ^ ~g4);
        q5' = (q4 ^ g4) | (q5 ^ ~g5);
        q6' = (q5 ^ g5) | (q6 ^ ~g6);
        q7' = (q6 ^ g6) | (q7 ^ ~g7);
        q8' = (q7 ^ g7) | (q8);



    };

    // R = 1 as long as the pole is upright and the cart is not out of bounds
    reward = 100 * q8  - t * 10;

    termination {
        t;
        q8;
    };

    action-preconditions {
        force >= -FORCE-MAX;
		force <= FORCE-MAX;
    };

}